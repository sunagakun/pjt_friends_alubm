// return GridView.builder(
     // gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
     // crossAxisCount: 3,
     // ),
     // itemCount: 1 + snapshot.data.length,
     // itemBuilder: (BuildContext context, int index) {
     // if (index == 0) {
     // // return Padding(
     // //   padding:
     // //       EdgeInsets.symmetric(horizontal: 40.0, vertical: 20.0),
     // //   child: Column(
     // //     crossAxisAlignment: CrossAxisAlignment.start,
     // //     children: <Widget>[
     // //       Text(
     // //         '友達を図鑑に登録しましょう！',
     // //       ),
     // //     ],
     // //   ),
     // // );
     // }
     // return _buildReg(snapshot.data[index - 1]);
     // },
     // )}

 // return GridView.count(
            //   crossAxisCount: 3,
            //   children: List.generate(1 + snapshot.data.length, (index) {
            //     if (index == 0) {
            //       return Padding(
            //         padding:
            //         EdgeInsets.symmetric(horizontal: 40.0, vertical: 20.0),
            //         child: Column(
            //           crossAxisAlignment: CrossAxisAlignment.start,
            //           children: <Widget>[
            //             Text(
            //               '友達を図鑑に登録しましょう！',
            //             ),
            //           ],
            //         ),
            //       );
            //     }
            //     return _buildReg(snapshot.data[index - 1]);
            //   },
            //   ),
            // );

import 'package:flutter/material.dart';
import '../components/appbar.dart';
import 'package:intl/intl.dart';
import 'package:friends_alubm/components/database_helper.dart';
import 'package:friends_alubm/components/reg_model.dart';
import 'package:friends_alubm/screens/friends_reg_screen.dart';

class FriendsListScreen extends StatefulWidget {
  @override
  _FriendsListScreenState createState() => _FriendsListScreenState();
}

class _FriendsListScreenState extends State<FriendsListScreen> {
  Future<List<Reg>> _regList;
  final DateFormat _dateFormatter = DateFormat('MMM / dd');

  @override
  void initState() {
    super.initState();
    _updateRegList();
  }

  _updateRegList() {
    setState(() {
      _regList = DatabaseHelper.instance.getRegList();
    });
  }

  Widget _buildReg(Reg reg) {
    return Padding(
      child: Column(children: <Widget>[
        Container(
          padding: EdgeInsets.all(10.0),
          child: Text(
            'No, 001',
          ),
        ),
        Container(
          padding: EdgeInsets.all(10.0),
          child: Text(
            reg.sei + ' ' + reg.mei,
          ),
        ),
        Container(
          margin: EdgeInsets.all(10.0),
          child: Text(
            '画像が入ります',
          ),
        ),
      ]),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: MainHeader(),
      floatingActionButton: FloatingActionButton(
        backgroundColor: Theme
            .of(context)
            .primaryColor,
        child: Icon(Icons.add),
        onPressed: () =>
            Navigator.push(
              context,
              MaterialPageRoute(
                builder: (_) =>
                    AddFriendsScreen(
                      updateRegFriends: _updateRegList,
                    ),
              ),
            ),
      ),
      body: FutureBuilder(
          future: _regList,
          builder: (context, snapshot) {
            if (!snapshot.hasData) {
              return Center(
                child: CircularProgressIndicator(),
              );
            }
            return GridView.count(
              crossAxisCount: 3,
              children: List.generate(1 + snapshot.data.length, (index) {
                if (index == 0) {
                  return Padding(
                    padding:
                    EdgeInsets.symmetric(horizontal: 40.0, vertical: 20.0),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: <Widget>[
                        Text(
                          '友達を図鑑に登録しましょう！',
                        ),
                      ],
                    ),
                  );
                }
                return _buildReg(snapshot.data[index - 1]);
              },
              ),
            );
          }),
    );
  }
}

//20210101

import 'package:flutter/material.dart';
import '../components/appbar.dart';
import 'package:intl/intl.dart';
import 'package:friends_alubm/components/database_helper.dart';
import 'package:friends_alubm/components/reg_model.dart';
import 'package:friends_alubm/screens/friends_reg_screen.dart';

//TODO おそらく一覧出力時にグリッドをこえてしまっていてエラーがでてしまっている。

class FriendsListScreen extends StatefulWidget {
  @override
  _FriendsListScreenState createState() => _FriendsListScreenState();
}

class _FriendsListScreenState extends State<FriendsListScreen> {
  Future<List<Reg>> _regList;
  final DateFormat _dateFormatter = DateFormat('MMM / dd');

  @override
  void initState() {
    super.initState();
    _updateRegList();
  }

  _updateRegList() {
    setState(() {
      _regList = DatabaseHelper.instance.getRegList();
    });
  }

  Widget _buildReg(Reg reg) {
    return SingleChildScrollView(
      padding:
      EdgeInsets.symmetric(horizontal: 5.0, vertical: 5.0),

      child: Column(children: <Widget>[
        Container(
          child: Text('No,001' + ' ' + reg.sei + reg.mei, overflow: TextOverflow.clip),
          color: Colors.blue,
        ),
        Container(
          child: Text(
            '画像が入ります',
          ),
          color: Colors.green,
        ),
      ]),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: MainHeader(),
      floatingActionButton: FloatingActionButton(
        backgroundColor: Theme.of(context).primaryColor,
        child: Icon(Icons.add),
        onPressed: () => Navigator.push(
          context,
          MaterialPageRoute(
            builder: (_) => AddFriendsScreen(
              updateRegFriends: _updateRegList,
            ),
          ),
        ),
      ),
      body: FutureBuilder(
          future: _regList,
          builder: (context, snapshot) {
            if (!snapshot.hasData) {
              return Center(
                child: CircularProgressIndicator(),
              );
            }
            return GridView.builder(
              gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 3,
              ),
              itemCount: 1 + snapshot.data.length,
              itemBuilder: (BuildContext context, int index) {
                if (index == 0) {
                  return SingleChildScrollView(
                    padding:
                        EdgeInsets.symmetric(horizontal: 40.0, vertical: 5.0),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: <Widget>[
                        Text(
                          '友達を図鑑に登録しましょう！',
                        ),
                      ],
                    ),
                  );
                }
                return _buildReg(snapshot.data[index - 1]);
              },
            );
          }),
    );
  }
}

  void takePhoto() async {
    var friendImage = await ImagePicker.pickImage(source: ImageSource.gallery, maxWidth: 100, maxHeight: 100);
    List<int> bytesImage = friendImage.readAsBytes() as List<int>;
    print(bytesImage);

    String base64Image = base64Encode(bytesImage);

    setState(() {
      _image = base64Image;
    });
  }

  void takePhoto() async {
    final _friendImage = await ImagePicker().getImage(source: ImageSource.gallery, maxWidth: 100, maxHeight: 100);
    Uint8List bytesImage = _friendImage.readAsBytes() as Uint8List;
    print(bytesImage);

    // String base64Image = base64Encode(bytesImage);

    setState(() {
      if(_friendImage != null) {
        _showImage = File(_friendImage.path);
        _image = bytesImage;
      }
    });
  }

  //20210212 base64テスト前バックアップ

  import 'dart:convert';
  import 'package:flutter/material.dart';
  import 'package:friends_alubm/components/database_helper.dart';
  import 'package:friends_alubm/components/reg_model.dart';
  import 'package:intl/intl.dart';
  import 'package:image_picker/image_picker.dart';
  import 'dart:io' as Io;
  import '';
  import 'package:path_provider/path_provider.dart';



  class AddFriendsScreen extends StatefulWidget {
    final Function updateRegFriends;
    final Reg reg;

    AddFriendsScreen({this.updateRegFriends, this.reg});

    @override
    _AddFriendsScreenState createState() => _AddFriendsScreenState();
  }

  class _AddFriendsScreenState extends State<AddFriendsScreen> {
    final _formKey = GlobalKey<FormState>();
    String _image;
    String _sei = '';
    String _Ksei = '';
    String _mei = '';
    String _Kmei = '';
    String _like = '';
    DateTime _birthday = DateTime.now();
    TextEditingController _dateController = TextEditingController();

    File _showImage;

    final DateFormat _dateFormatter = DateFormat('yyyy/MM/dd');


    @override
    void initState() {
      super.initState();

      if (widget.reg != null) {
        _image = widget.reg.image;
        _sei = widget.reg.sei;
        _Ksei = widget.reg.Ksei;
        _mei = widget.reg.mei;
        _Kmei = widget.reg.Kmei;
        _like = widget.reg.like;
        _birthday = widget.reg.birthday;
      }

      _dateController.text = _dateFormatter.format(_birthday);
    }

    @override
    void dispose() {
      _dateController.dispose();
      super.dispose();
    }

    Future _takePhoto() async {
      final _friendImage = await ImagePicker().getImage(source: ImageSource.gallery, maxWidth: 100, maxHeight: 100);
      final aaa = await Io.File(_friendImage).readAsBytes();
      final _bytesImage = await _friendImage.readAsBytes();
      print(_bytesImage);
      // String base64Image = base64Encode(bytesImage);
      String _base64Image = base64Encode(_bytesImage);

      setState(() {
        if(_friendImage != null) {
          _showImage = File(_friendImage.path);
          _image = _base64Image;
        }
      });
    }

    _handleDatePicker() async {
      final DateTime date = await showDatePicker(
        context: context,
        initialDate: _birthday,
        firstDate: DateTime(1950),
        lastDate: DateTime(2100),
      );
      if (date != null && date != _birthday) {
        setState(() {
          _birthday = date;
        });
        _dateController.text = _dateFormatter.format(date);
      }
    }

    _delete() {
      DatabaseHelper.instance.deleteReg(widget.reg.id);
      widget.updateRegFriends();
      Navigator.pop(context);
    }

    _submit() {
      if (_formKey.currentState.validate()) {
        _formKey.currentState.save();

        Reg reg = Reg(image: _image,sei: _sei, Ksei: _Ksei, mei: _mei, Kmei: _Kmei, birthday: _birthday);
        if (widget.reg == null) {
          DatabaseHelper.instance.insertReg(reg);
        } else {
          reg.id = widget.reg.id;
          DatabaseHelper.instance.updateReg(reg);
        }
        widget.updateRegFriends();
        Navigator.pop(context);
      }
    }

    @override
    Widget build(BuildContext context) {
      return Scaffold(
        body: GestureDetector(
          onTap: () => FocusScope.of(context).unfocus(),
          //opTapでフォーカスを外し、キーボードを隠すようにする処理
          child: SingleChildScrollView(
            child: SingleChildScrollView(
              child: Container(
                child: Column(
                  children: <Widget>[
                    GestureDetector(
                      onTap: () => Navigator.pop(context),
                      child: Icon(
                        Icons.arrow_back,
                        size: 30.0,
                        color: Theme
                            .of(context)
                            .primaryColor,
                      ),
                    ),
                    SizedBox(
                      height: 20.0,
                    ),
                    Text(
                      widget.reg == null ? '写真を登録' : '写真を編集',
                      style: TextStyle(
                        color: Colors.black,
                        fontSize: 40.0,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    SizedBox(height: 10.0),
                    Form(
                      key: _formKey,
                      child: Column(
                        children: <Widget>[
                          Padding(
                            padding: EdgeInsets.symmetric(vertical: 20.0),
                            child: Container(
                              child: _showImage == null
                                  ? Text('選択中の画像はありません')
                                  : Image.file(_showImage)
                              ),
                            ),
                          Padding(
                            padding: EdgeInsets.symmetric(vertical: 20.0),
                            child: FlatButton(
                              child: const Text('友達の写真を選択'),
                              onPressed: (){
                                _takePhoto();
                              },
                            ),
                          ),
                          Padding(
                            padding: EdgeInsets.symmetric(vertical: 20.0),
                            child: TextFormField(
                              style: TextStyle(fontSize: 18.0),
                              decoration: InputDecoration(
                                labelText: '姓',
                                labelStyle: TextStyle(fontSize: 18.0),
                                border: OutlineInputBorder(
                                    borderRadius: BorderRadius.circular(10.0),
                                ),
                              ),
                              validator: (input) =>
                              input
                                  .trim()
                                  .isEmpty ? '姓を入力してください' : null,
                              onSaved: (input) => _sei = input,
                              initialValue: _sei,
                            ),
                          ),
                          Padding(
                            padding: EdgeInsets.symmetric(vertical: 20.0),
                            child: TextFormField(
                              style: TextStyle(fontSize: 18.0),
                              decoration: InputDecoration(
                                labelText: '姓(ふりがな)',
                                labelStyle: TextStyle(fontSize: 18.0),
                                border: OutlineInputBorder(
                                    borderRadius: BorderRadius.circular(10.0),
                                ),
                              ),
                              validator: (input) =>
                              input
                                  .trim()
                                  .isEmpty ? '姓（ふりがな）を入力してください' : null,
                              onSaved: (input) => _Ksei = input,
                              initialValue: _Ksei,
                            ),
                          ),
                          Padding(
                            padding: EdgeInsets.symmetric(vertical: 20.0),
                            child: TextFormField(
                              style: TextStyle(fontSize: 18.0),
                              decoration: InputDecoration(
                                labelText: '名',
                                labelStyle: TextStyle(fontSize: 18.0),
                                border: OutlineInputBorder(
                                    borderRadius: BorderRadius.circular(10.0),
                                ),
                              ),
                              validator: (input) =>
                              input
                                  .trim()
                                  .isEmpty ? '名を入力してください' : null,
                              onSaved: (input) => _mei = input,
                              initialValue: _mei,
                            ),
                          ),
                          Padding(
                            padding: EdgeInsets.symmetric(vertical: 20.0),
                            child: TextFormField(
                              style: TextStyle(fontSize: 18.0),
                              decoration: InputDecoration(
                                labelText: '名（ふりがな）',
                                labelStyle: TextStyle(fontSize: 18.0),
                                border: OutlineInputBorder(
                                    borderRadius: BorderRadius.circular(10.0),
                                ),
                              ),
                              validator: (input) =>
                              input
                                  .trim()
                                  .isEmpty ? '名（ふりがな）を入力してください' : null,
                              onSaved: (input) => _Kmei = input,
                              initialValue: _Kmei,
                            ),
                          ),
                          Padding(
                            padding: EdgeInsets.symmetric(vertical: 20.0),
                            child: TextFormField(
                              readOnly: true,
                              controller: _dateController,
                              style: TextStyle(fontSize: 18.0),
                              onTap: _handleDatePicker,
                              decoration: InputDecoration(
                                labelText: '誕生日',
                                labelStyle: TextStyle(fontSize: 18.0),
                                border: OutlineInputBorder(
                                  borderRadius: BorderRadius.circular(10.0),
                                ),
                              ),
                            ),
                          ),
                          Container(
                            margin: EdgeInsets.symmetric(vertical: 20.0),
                            height: 60.0,
                            width: double.infinity,
                            decoration: BoxDecoration(
                              color: Theme
                                  .of(context)
                                  .primaryColor,
                              borderRadius: BorderRadius.circular(30.0),
                            ),
                            child: FlatButton(
                              child: Text(
                                widget.reg == null ? '友達を追加' : '編集',
                                style: TextStyle(
                                  color: Colors.white,
                                  fontSize: 20.0,
                                ),
                              ),
                              onPressed: _submit,
                            ),
                          ),
                          widget.reg != null ? Container(
                            margin: EdgeInsets.symmetric(vertical: 20.0),
                            height: 60.0,
                            width: double.infinity,
                            decoration: BoxDecoration(
                              color: Theme
                                  .of(context)
                                  .primaryColor,
                              borderRadius: BorderRadius.circular(30.0),
                            ),
                            child: FlatButton(
                              child: Text(
                                '削除',
                                style: TextStyle(
                                  color: Colors.white,
                                  fontSize: 20.0,
                                ),
                              ),
                              onPressed: _delete,
                            ),) : SizedBox.shrink(),
                        ],
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ),
        ),
      );
    }

  }

  //20210215 image_croper 導入前 friends_reg_screen

  import 'dart:convert';
  import 'dart:typed_data';
  import 'package:flutter/material.dart';
  import 'package:friends_alubm/components/database_helper.dart';
  import 'package:friends_alubm/components/reg_model.dart';
  import 'package:intl/intl.dart';
  import 'package:image_picker/image_picker.dart';
  import 'dart:io';
  import 'package:path_provider/path_provider.dart';



  class AddFriendsScreen extends StatefulWidget {
    final Function updateRegFriends;
    final Reg reg;

    AddFriendsScreen({this.updateRegFriends, this.reg});

    @override
    _AddFriendsScreenState createState() => _AddFriendsScreenState();
  }

  class _AddFriendsScreenState extends State<AddFriendsScreen> {
    final _formKey = GlobalKey<FormState>();
    Uint8List _image;
    String _sei = '';
    String _Ksei = '';
    String _mei = '';
    String _Kmei = '';
    String _like = '';
    DateTime _birthday = DateTime.now();
    TextEditingController _dateController = TextEditingController();

    File _showImage;

    final DateFormat _dateFormatter = DateFormat('yyyy/MM/dd');


    @override
    void initState() {
      super.initState();

      if (widget.reg != null) {
        _image = widget.reg.image as Uint8List;
        _sei = widget.reg.sei;
        _Ksei = widget.reg.Ksei;
        _mei = widget.reg.mei;
        _Kmei = widget.reg.Kmei;
        _like = widget.reg.like;
        _birthday = widget.reg.birthday;
      }

      _dateController.text = _dateFormatter.format(_birthday);
    }

    @override
    void dispose() {
      _dateController.dispose();
      super.dispose();
    }

    Future _takePhoto() async {
      final _friendImage = await ImagePicker().getImage(source: ImageSource.gallery, maxWidth: 100, maxHeight: 100);
      Uint8List _bytesImage = await _friendImage.readAsBytes();
      print(_bytesImage);
      // String base64Image = base64Encode(_bytesImage);

      setState(() {
        if(_friendImage != null) {
          _showImage = File(_friendImage.path);
          _image = _bytesImage;
        }
      });
    }

    _handleDatePicker() async {
      final DateTime date = await showDatePicker(
        context: context,
        initialDate: _birthday,
        firstDate: DateTime(1950),
        lastDate: DateTime(2100),
      );
      if (date != null && date != _birthday) {
        setState(() {
          _birthday = date;
        });
        _dateController.text = _dateFormatter.format(date);
      }
    }

    _delete() {
      DatabaseHelper.instance.deleteReg(widget.reg.id);
      widget.updateRegFriends();
      Navigator.pop(context);
    }

    _submit() {
      if (_formKey.currentState.validate()) {
        _formKey.currentState.save();

        Reg reg = Reg(image: _image,sei: _sei, Ksei: _Ksei, mei: _mei, Kmei: _Kmei, birthday: _birthday);
        if (widget.reg == null) {
          DatabaseHelper.instance.insertReg(reg);
        } else {
          reg.id = widget.reg.id;
          DatabaseHelper.instance.updateReg(reg);
        }
        widget.updateRegFriends();
        Navigator.pop(context);
      }
    }

    @override
    Widget build(BuildContext context) {
      return Scaffold(
        body: GestureDetector(
          onTap: () => FocusScope.of(context).unfocus(),   //opTapでフォーカスを外し、キーボードを隠すようにする処理
          child: SingleChildScrollView(
            child: SingleChildScrollView(
              child: Container(
                child: Column(
                  children: <Widget>[
                    GestureDetector(
                      onTap: () => Navigator.pop(context),
                      child: Icon(
                        Icons.arrow_back,
                        size: 30.0,
                        color: Theme
                            .of(context)
                            .primaryColor,
                      ),
                    ),
                    SizedBox(
                      height: 20.0,
                    ),
                    Text(
                      widget.reg == null ? '写真を登録' : '写真を編集',
                      style: TextStyle(
                        color: Colors.black,
                        fontSize: 40.0,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    SizedBox(height: 10.0),
                    Form(
                      key: _formKey,
                      child: Column(
                        children: <Widget>[
                          Padding(
                            padding: EdgeInsets.symmetric(vertical: 20.0),
                            child: Container(
                              child: _showImage == null
                                  ? Text('選択中の画像はありません')
                                  : Image.file(_showImage)
                              ),
                            ),
                          Padding(
                            padding: EdgeInsets.symmetric(vertical: 20.0),
                            child: FlatButton(
                              child: const Text('友達の写真を選択'),
                              onPressed: (){
                                _takePhoto();
                              },
                            ),
                          ),
                          Padding(
                            padding: EdgeInsets.symmetric(vertical: 20.0),
                            child: TextFormField(
                              style: TextStyle(fontSize: 18.0),
                              decoration: InputDecoration(
                                labelText: '姓',
                                labelStyle: TextStyle(fontSize: 18.0),
                                border: OutlineInputBorder(
                                    borderRadius: BorderRadius.circular(10.0),
                                ),
                              ),
                              validator: (input) =>
                              input
                                  .trim()
                                  .isEmpty ? '姓を入力してください' : null,
                              onSaved: (input) => _sei = input,
                              initialValue: _sei,
                            ),
                          ),
                          Padding(
                            padding: EdgeInsets.symmetric(vertical: 20.0),
                            child: TextFormField(
                              style: TextStyle(fontSize: 18.0),
                              decoration: InputDecoration(
                                labelText: '姓(ふりがな)',
                                labelStyle: TextStyle(fontSize: 18.0),
                                border: OutlineInputBorder(
                                    borderRadius: BorderRadius.circular(10.0),
                                ),
                              ),
                              validator: (input) =>
                              input
                                  .trim()
                                  .isEmpty ? '姓（ふりがな）を入力してください' : null,
                              onSaved: (input) => _Ksei = input,
                              initialValue: _Ksei,
                            ),
                          ),
                          Padding(
                            padding: EdgeInsets.symmetric(vertical: 20.0),
                            child: TextFormField(
                              style: TextStyle(fontSize: 18.0),
                              decoration: InputDecoration(
                                labelText: '名',
                                labelStyle: TextStyle(fontSize: 18.0),
                                border: OutlineInputBorder(
                                    borderRadius: BorderRadius.circular(10.0),
                                ),
                              ),
                              validator: (input) =>
                              input
                                  .trim()
                                  .isEmpty ? '名を入力してください' : null,
                              onSaved: (input) => _mei = input,
                              initialValue: _mei,
                            ),
                          ),
                          Padding(
                            padding: EdgeInsets.symmetric(vertical: 20.0),
                            child: TextFormField(
                              style: TextStyle(fontSize: 18.0),
                              decoration: InputDecoration(
                                labelText: '名（ふりがな）',
                                labelStyle: TextStyle(fontSize: 18.0),
                                border: OutlineInputBorder(
                                    borderRadius: BorderRadius.circular(10.0),
                                ),
                              ),
                              validator: (input) =>
                              input
                                  .trim()
                                  .isEmpty ? '名（ふりがな）を入力してください' : null,
                              onSaved: (input) => _Kmei = input,
                              initialValue: _Kmei,
                            ),
                          ),
                          Padding(
                            padding: EdgeInsets.symmetric(vertical: 20.0),
                            child: TextFormField(
                              readOnly: true,
                              controller: _dateController,
                              style: TextStyle(fontSize: 18.0),
                              onTap: _handleDatePicker,
                              decoration: InputDecoration(
                                labelText: '誕生日',
                                labelStyle: TextStyle(fontSize: 18.0),
                                border: OutlineInputBorder(
                                  borderRadius: BorderRadius.circular(10.0),
                                ),
                              ),
                            ),
                          ),
                          Container(
                            margin: EdgeInsets.symmetric(vertical: 20.0),
                            height: 60.0,
                            width: double.infinity,
                            decoration: BoxDecoration(
                              color: Theme
                                  .of(context)
                                  .primaryColor,
                              borderRadius: BorderRadius.circular(30.0),
                            ),
                            child: FlatButton(
                              child: Text(
                                widget.reg == null ? '友達を追加' : '編集',
                                style: TextStyle(
                                  color: Colors.white,
                                  fontSize: 20.0,
                                ),
                              ),
                              onPressed: _submit,
                            ),
                          ),
                          widget.reg != null ? Container(
                            margin: EdgeInsets.symmetric(vertical: 20.0),
                            height: 60.0,
                            width: double.infinity,
                            decoration: BoxDecoration(
                              color: Theme
                                  .of(context)
                                  .primaryColor,
                              borderRadius: BorderRadius.circular(30.0),
                            ),
                            child: FlatButton(
                              child: Text(
                                '削除',
                                style: TextStyle(
                                  color: Colors.white,
                                  fontSize: 20.0,
                                ),
                              ),
                              onPressed: _delete,
                            ),) : SizedBox.shrink(),
                        ],
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ),
        ),
      );
    }

  }

 //image_cropper 完成バックアップ
 import 'dart:convert';
 import 'dart:typed_data';
 import 'package:flutter/material.dart';
 import 'package:friends_alubm/components/database_helper.dart';
 import 'package:friends_alubm/components/reg_model.dart';
 import 'package:image_cropper/image_cropper.dart';
 import 'package:intl/intl.dart';
 import 'package:image_picker/image_picker.dart';
 import 'dart:io';
 import 'package:path_provider/path_provider.dart';



 class AddFriendsScreen extends StatefulWidget {
   final Function updateRegFriends;
   final Reg reg;

   AddFriendsScreen({this.updateRegFriends, this.reg});

   @override
   _AddFriendsScreenState createState() => _AddFriendsScreenState();
 }

 class _AddFriendsScreenState extends State<AddFriendsScreen> {
   final _formKey = GlobalKey<FormState>();
   Uint8List _image;
   String _sei = '';
   String _Ksei = '';
   String _mei = '';
   String _Kmei = '';
   String _like = '';
   DateTime _birthday = DateTime.now();
   TextEditingController _dateController = TextEditingController();

   File _showImage;

   final DateFormat _dateFormatter = DateFormat('yyyy/MM/dd');


   @override
   void initState() {
     super.initState();

     if (widget.reg != null) {
       _image = widget.reg.image as Uint8List;
       _sei = widget.reg.sei;
       _Ksei = widget.reg.Ksei;
       _mei = widget.reg.mei;
       _Kmei = widget.reg.Kmei;
       _like = widget.reg.like;
       _birthday = widget.reg.birthday;
     }

     _dateController.text = _dateFormatter.format(_birthday);
   }

   @override
   void dispose() {
     _dateController.dispose();
     super.dispose();
   }

   // _takePhoto() async {
   //   final _friendImage = await ImagePicker().getImage(source: ImageSource.gallery, maxWidth: 100, maxHeight: 100);
   //   Uint8List _bytesImage = await _friendImage.readAsBytes();
   //   print(_bytesImage);
   //   // String base64Image = base64Encode(_bytesImage);
   //
   //   setState(() {
   //     if(_friendImage != null) {
   //       _showImage = File(_friendImage.path);
   //       _image = _bytesImage;
   //     }
   //   });
   // }

   _takePhoto() async {
     final friendImage = await ImagePicker().getImage(source: ImageSource.gallery, maxWidth: 200, maxHeight: 200);
     _cropImage(friendImage.path);
   }

   _cropImage(filePath) async {
     File _croppedImage = await ImageCropper.cropImage(
       sourcePath: filePath,
       maxHeight: 200,
       maxWidth: 200,
         aspectRatio: CropAspectRatio(ratioX: 1.0, ratioY: 1.0)
     );
     if (_croppedImage != null) {
       Uint8List _imageFile = await _croppedImage.readAsBytes();
       setState(() {
         _showImage = File(_croppedImage.path);
         _image = _imageFile;
       });
     }
   }

   _handleDatePicker() async {
     final DateTime date = await showDatePicker(
       context: context,
       initialDate: _birthday,
       firstDate: DateTime(1950),
       lastDate: DateTime(2100),
     );
     if (date != null && date != _birthday) {
       setState(() {
         _birthday = date;
       });
       _dateController.text = _dateFormatter.format(date);
     }
   }

   _delete() {
     DatabaseHelper.instance.deleteReg(widget.reg.id);
     widget.updateRegFriends();
     Navigator.pop(context);
   }

   _submit() {
     if (_formKey.currentState.validate()) {
       _formKey.currentState.save();

       Reg reg = Reg(image: _image,sei: _sei, Ksei: _Ksei, mei: _mei, Kmei: _Kmei, birthday: _birthday);
       if (widget.reg == null) {
         DatabaseHelper.instance.insertReg(reg);
       } else {
         reg.id = widget.reg.id;
         DatabaseHelper.instance.updateReg(reg);
       }
       widget.updateRegFriends();
       Navigator.pop(context);
     }
   }

   @override
   Widget build(BuildContext context) {
     return Scaffold(
       body: GestureDetector(
         onTap: () => FocusScope.of(context).unfocus(),   //opTapでフォーカスを外し、キーボードを隠すようにする処理
         child: SingleChildScrollView(
           child: SingleChildScrollView(
             child: Container(
               child: Column(
                 children: <Widget>[
                   GestureDetector(
                     onTap: () => Navigator.pop(context),
                     child: Icon(
                       Icons.arrow_back,
                       size: 30.0,
                       color: Theme
                           .of(context)
                           .primaryColor,
                     ),
                   ),
                   SizedBox(
                     height: 20.0,
                   ),
                   Text(
                     widget.reg == null ? '写真を登録' : '写真を編集',
                     style: TextStyle(
                       color: Colors.black,
                       fontSize: 40.0,
                       fontWeight: FontWeight.bold,
                     ),
                   ),
                   SizedBox(height: 10.0),
                   Form(
                     key: _formKey,
                     child: Column(
                       children: <Widget>[
                         Padding(
                           padding: EdgeInsets.symmetric(vertical: 20.0),
                           child: Container(
                             child: _showImage == null
                                 ? Text('選択中の画像はありません')
                                 : Image.file(_showImage)
                             ),
                           ),
                         Padding(
                           padding: EdgeInsets.symmetric(vertical: 20.0),
                           child: FlatButton(
                             child: const Text('友達の写真を選択'),
                             onPressed: (){
                               _takePhoto();
                             },
                           ),
                         ),
                         Padding(
                           padding: EdgeInsets.symmetric(vertical: 20.0),
                           child: TextFormField(
                             style: TextStyle(fontSize: 18.0),
                             decoration: InputDecoration(
                               labelText: '姓',
                               labelStyle: TextStyle(fontSize: 18.0),
                               border: OutlineInputBorder(
                                   borderRadius: BorderRadius.circular(10.0),
                               ),
                             ),
                             validator: (input) =>
                             input
                                 .trim()
                                 .isEmpty ? '姓を入力してください' : null,
                             onSaved: (input) => _sei = input,
                             initialValue: _sei,
                           ),
                         ),
                         Padding(
                           padding: EdgeInsets.symmetric(vertical: 20.0),
                           child: TextFormField(
                             style: TextStyle(fontSize: 18.0),
                             decoration: InputDecoration(
                               labelText: '姓(ふりがな)',
                               labelStyle: TextStyle(fontSize: 18.0),
                               border: OutlineInputBorder(
                                   borderRadius: BorderRadius.circular(10.0),
                               ),
                             ),
                             validator: (input) =>
                             input
                                 .trim()
                                 .isEmpty ? '姓（ふりがな）を入力してください' : null,
                             onSaved: (input) => _Ksei = input,
                             initialValue: _Ksei,
                           ),
                         ),
                         Padding(
                           padding: EdgeInsets.symmetric(vertical: 20.0),
                           child: TextFormField(
                             style: TextStyle(fontSize: 18.0),
                             decoration: InputDecoration(
                               labelText: '名',
                               labelStyle: TextStyle(fontSize: 18.0),
                               border: OutlineInputBorder(
                                   borderRadius: BorderRadius.circular(10.0),
                               ),
                             ),
                             validator: (input) =>
                             input
                                 .trim()
                                 .isEmpty ? '名を入力してください' : null,
                             onSaved: (input) => _mei = input,
                             initialValue: _mei,
                           ),
                         ),
                         Padding(
                           padding: EdgeInsets.symmetric(vertical: 20.0),
                           child: TextFormField(
                             style: TextStyle(fontSize: 18.0),
                             decoration: InputDecoration(
                               labelText: '名（ふりがな）',
                               labelStyle: TextStyle(fontSize: 18.0),
                               border: OutlineInputBorder(
                                   borderRadius: BorderRadius.circular(10.0),
                               ),
                             ),
                             validator: (input) =>
                             input
                                 .trim()
                                 .isEmpty ? '名（ふりがな）を入力してください' : null,
                             onSaved: (input) => _Kmei = input,
                             initialValue: _Kmei,
                           ),
                         ),
                         Padding(
                           padding: EdgeInsets.symmetric(vertical: 20.0),
                           child: TextFormField(
                             readOnly: true,
                             controller: _dateController,
                             style: TextStyle(fontSize: 18.0),
                             onTap: _handleDatePicker,
                             decoration: InputDecoration(
                               labelText: '誕生日',
                               labelStyle: TextStyle(fontSize: 18.0),
                               border: OutlineInputBorder(
                                 borderRadius: BorderRadius.circular(10.0),
                               ),
                             ),
                           ),
                         ),
                         Container(
                           margin: EdgeInsets.symmetric(vertical: 20.0),
                           height: 60.0,
                           width: double.infinity,
                           decoration: BoxDecoration(
                             color: Theme
                                 .of(context)
                                 .primaryColor,
                             borderRadius: BorderRadius.circular(30.0),
                           ),
                           child: FlatButton(
                             child: Text(
                               widget.reg == null ? '友達を追加' : '編集',
                               style: TextStyle(
                                 color: Colors.white,
                                 fontSize: 20.0,
                               ),
                             ),
                             onPressed: _submit,
                           ),
                         ),
                         widget.reg != null ? Container(
                           margin: EdgeInsets.symmetric(vertical: 20.0),
                           height: 60.0,
                           width: double.infinity,
                           decoration: BoxDecoration(
                             color: Theme
                                 .of(context)
                                 .primaryColor,
                             borderRadius: BorderRadius.circular(30.0),
                           ),
                           child: FlatButton(
                             child: Text(
                               '削除',
                               style: TextStyle(
                                 color: Colors.white,
                                 fontSize: 20.0,
                               ),
                             ),
                             onPressed: _delete,
                           ),) : SizedBox.shrink(),
                       ],
                     ),
                   ),
                 ],
               ),
             ),
           ),
         ),
       ),
     );
   }

 }

 //ontap処理
  InkWell(
               onTap: () => Navigator.push(
                 context,
                 MaterialPageRoute(
                   builder: (_) => AddFriendsScreen(
                     updateRegFriends: _updateRegList,
                     reg: reg,
                   ),
                 ),
               ),
             ),

//20210222 friends_alubm_screen
import 'dart:typed_data';
import 'package:flutter/material.dart';
import '../components/appbar.dart';
import 'package:intl/intl.dart';
import 'package:friends_alubm/components/database_helper.dart';
import 'package:friends_alubm/components/reg_model.dart';
import 'package:friends_alubm/screens/friends_reg_screen.dart';
import 'dart:convert';

class FriendsListScreen extends StatefulWidget {
  @override
  _FriendsListScreenState createState() => _FriendsListScreenState();
}

class _FriendsListScreenState extends State<FriendsListScreen> {
  Future<List<Reg>> _regList;
  final DateFormat _dateFormatter = DateFormat('MMM / dd');

  @override
  void initState() {
    super.initState();
    _updateRegList();
  }

  _updateRegList() {
    setState(() {
      _regList = DatabaseHelper.instance.getRegList();
    });
  }

   _encImage(Reg reg){
    // Uint8List encodeImage = base64.decode(reg.image);
    // Image.memory(encodeImage);
  }


  Widget _buildReg(Reg reg)
  {
    return SingleChildScrollView(
      child: Column( //TODO　グリッドセルの調整からすたーと
          children: <Widget>[
            Container(
                child: Text('No,001' + ' ' + reg.sei + ' ' + reg.mei,
                    style: TextStyle(
                      color: Colors.black,
                      fontSize: 15.0,
                    ),
                   overflow: TextOverflow.clip
                ),
              //   decoration: BoxDecoration(
              //     color: Colors.greenAccent,
              //     border: Border.all(color: Colors.greenAccent,width: 3),
              // ),
            ),
            Container(
             child: reg.image == null
                  ? Text('画像が登録されていません。')
                  : SizedBox(width:100,height:100,child: Image.memory(reg.image)),
            ),
          ],
      ),
        );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: MainHeader(),
      floatingActionButton: FloatingActionButton(
        backgroundColor: Theme.of(context).primaryColor,
        child: Icon(Icons.add),
        onPressed: () => Navigator.push(
          context,
          MaterialPageRoute(
            builder: (_) => AddFriendsScreen(
              updateRegFriends: _updateRegList,
            ),
          ),
        ),
      ),
      body: FutureBuilder(
          future: _regList,
          builder: (context, snapshot) {
            if (!snapshot.hasData) {
              return Center(
                child: CircularProgressIndicator(),
              );
            }
            return GridView.builder(
              gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 2,
              ),
              itemCount: 1 + snapshot.data.length,
              itemBuilder: (BuildContext context, int index) {
                if (index == 0) {
                  return SingleChildScrollView(
                    padding:
                        EdgeInsets.symmetric(horizontal: 5.0, vertical: 5.0),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: <Widget>[
                        Text(
                          '友達を図鑑に登録しましょう！',
                        ),
                      ],
                    ),
                  );
                }
                return _buildReg(snapshot.data[index - 1]);
              },
            );
          }),
    );
  }
}

import 'dart:typed_data';
import 'package:flutter/material.dart';
import '../components/appbar.dart';
import 'package:intl/intl.dart';
import 'package:friends_alubm/components/database_helper.dart';
import 'package:friends_alubm/components/reg_model.dart';
import 'package:friends_alubm/screens/friends_reg_screen.dart';
import 'dart:convert';

class FriendsListScreen extends StatefulWidget {
  @override
  _FriendsListScreenState createState() => _FriendsListScreenState();
}

class _FriendsListScreenState extends State<FriendsListScreen> {
  Future<List<Reg>> _regList;
  final DateFormat _dateFormatter = DateFormat('MMM / dd');

  @override
  void initState() {
    super.initState();
    _updateRegList();
  }

  _updateRegList() {
    setState(() {
      _regList = DatabaseHelper.instance.getRegList();
    });
  }

   _encImage(Reg reg){
    // Uint8List encodeImage = base64.decode(reg.image);
    // Image.memory(encodeImage);
  }


  Widget _buildReg(Reg reg)
  {
    return SingleChildScrollView(
      child: Column( //TODO　グリッドセルの調整からすたーと
          children: <Widget>[
            Container(
                child: Text('No,001' + ' ' + reg.sei + ' ' + reg.mei,
                    style: TextStyle(
                      color: Colors.black,
                      fontSize: 15.0,
                    ),
                   overflow: TextOverflow.clip
                ),
              //   decoration: BoxDecoration(
              //     color: Colors.greenAccent,
              //     border: Border.all(color: Colors.greenAccent,width: 3),
              // ),
            ),
            Container(
             child: reg.image == null
                  ? Text('画像が登録されていません。')
                  : SizedBox(width:100,height:100,child: Image.memory(reg.image)),
            ),
          ],
      ),
        );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: MainHeader(),
      floatingActionButton: FloatingActionButton(
        backgroundColor: Theme.of(context).primaryColor,
        child: Icon(Icons.add),
        onPressed: () => Navigator.push(
          context,
          MaterialPageRoute(
            builder: (_) => AddFriendsScreen(
              updateRegFriends: _updateRegList,
            ),
          ),
        ),
      ),
      body: FutureBuilder(
          future: _regList,
          builder: (context, snapshot) {
            if (!snapshot.hasData) {
              return Center(
                child: CircularProgressIndicator(),
              );
            }
            return GridView.builder(
              gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 2,
              ),
              itemCount: 1 + snapshot.data.length,
              itemBuilder: (BuildContext context, int index) {
                if (_regList != null) {
                  return _buildReg(snapshot.data[index]);
                }
                return SingleChildScrollView(
                  padding:
                  EdgeInsets.symmetric(horizontal: 5.0, vertical: 5.0),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: <Widget>[
                      Text(
                        '友達を図鑑に登録しましょう！',
                      ),
                    ],
                  ),
                );
              },
            );
          }),
    );
  }
}

// 20210228 back up

import 'dart:typed_data';
import 'package:flutter/material.dart';
import '../components/appbar.dart';
import 'package:intl/intl.dart';
import 'package:friends_alubm/components/database_helper.dart';
import 'package:friends_alubm/components/reg_model.dart';
import 'package:friends_alubm/screens/friends_reg_screen.dart';
import 'dart:convert';

//TODO　グリッドビューの仕様調べるところからスタート、いけそう

class FriendsListScreen extends StatefulWidget {
  @override
  _FriendsListScreenState createState() => _FriendsListScreenState();
}

class _FriendsListScreenState extends State<FriendsListScreen> {
  Future<List<Reg>> _regList;
  final DateFormat _dateFormatter = DateFormat('MMM / dd');

  @override
  void initState() {
    super.initState();
    _updateRegList();
  }

  _updateRegList() {
    setState(() {
      _regList = DatabaseHelper.instance.getRegList();
    });
  }

  _encImage(Reg reg) {
    // Uint8List encodeImage = base64.decode(reg.image);
    // Image.memory(encodeImage);
  }


  Widget _buildReg(Reg reg) {
    return SingleChildScrollView(
      child: Column(
        children: <Widget>[
          Container(
            child: Text('No,001' + ' ' + reg.sei + ' ' + reg.mei,
                style: TextStyle(
                  color: Colors.black,
                  fontSize: 15.0,
                ),
                overflow: TextOverflow.clip
            ),
            //   decoration: BoxDecoration(
            //     color: Colors.greenAccent,
            //     border: Border.all(color: Colors.greenAccent,width: 3),
            // ),
          ),
          Container(
            child: reg.image == null
                ? Text('画像が登録されていません。')
                : SizedBox(
                width: 100, height: 100, child: Image.memory(reg.image)),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: MainHeader(),
      floatingActionButton: FloatingActionButton(
        backgroundColor: Theme
            .of(context)
            .primaryColor,
        child: Icon(Icons.add),
        onPressed: () =>
            Navigator.push(
              context,
              MaterialPageRoute(
                builder: (_) =>
                    AddFriendsScreen(
                      updateRegFriends: _updateRegList,
                    ),
              ),
            ),
      ),
      body: FutureBuilder(
          future: _regList,
          builder: (context, snapshot) {
            if (!snapshot.hasData) {
              return Center(
                child: Text(
                  '友達を図鑑に登録しましょう！',
                ),
                // child: CircularProgressIndicator(),
              );
            }
            return GridView.builder(
              gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 2,
              ),
              itemCount: snapshot.data.length,
              itemBuilder: (BuildContext context, int index) {
                return _buildReg(snapshot.data[index + 1]);
              },
            );
          }


      ),
    );
  }
}

//20210304 friends_reg_screen.dart

import 'dart:convert';
import 'dart:typed_data';
import 'package:flutter/material.dart';
import 'package:friends_alubm/components/database_helper.dart';
import 'package:friends_alubm/components/reg_model.dart';
import 'package:image_cropper/image_cropper.dart';
import 'package:intl/intl.dart';
import 'package:image_picker/image_picker.dart';
import 'dart:io';
import 'package:path_provider/path_provider.dart';



class AddFriendsScreen extends StatefulWidget {
  final Function updateRegFriends;
  final Reg reg;

  AddFriendsScreen({this.updateRegFriends, this.reg});

  @override
  _AddFriendsScreenState createState() => _AddFriendsScreenState();
}

class _AddFriendsScreenState extends State<AddFriendsScreen> {
  final _formKey = GlobalKey<FormState>();
  Uint8List _image;
  String _sei = '';
  String _Ksei = '';
  String _mei = '';
  String _Kmei = '';
  String _like = '';
  DateTime _birthday = DateTime.now();
  TextEditingController _dateController = TextEditingController();

  File _showImage;

  final DateFormat _dateFormatter = DateFormat('yyyy/MM/dd');


  @override
  void initState() {
    super.initState();

    if (widget.reg != null) {
      _image = widget.reg.image as Uint8List;
      _sei = widget.reg.sei;
      _Ksei = widget.reg.Ksei;
      _mei = widget.reg.mei;
      _Kmei = widget.reg.Kmei;
      _like = widget.reg.like;
      _birthday = widget.reg.birthday;
    }

    _dateController.text = _dateFormatter.format(_birthday);
  }

  @override
  void dispose() {
    _dateController.dispose();
    super.dispose();
  }

  // _takePhoto() async {
  //   final _friendImage = await ImagePicker().getImage(source: ImageSource.gallery, maxWidth: 100, maxHeight: 100);
  //   Uint8List _bytesImage = await _friendImage.readAsBytes();
  //   print(_bytesImage);
  //   // String base64Image = base64Encode(_bytesImage);
  //
  //   setState(() {
  //     if(_friendImage != null) {
  //       _showImage = File(_friendImage.path);
  //       _image = _bytesImage;
  //     }
  //   });
  // }

  _takePhoto() async {
    final friendImage = await ImagePicker().getImage(source: ImageSource.gallery);
    _cropImage(friendImage.path);
  }

  _cropImage(filePath) async {
    File _croppedImage = await ImageCropper.cropImage(
        sourcePath: filePath,
        maxHeight: 100,
        maxWidth: 100,
        aspectRatio: CropAspectRatio(ratioX: 1.0, ratioY: 1.0)
    );
    if (_croppedImage != null) {
      Uint8List _imageFile = await _croppedImage.readAsBytes();
      setState(() {
        _showImage = File(_croppedImage.path);
        _image = _imageFile;
      });
    }
  }

  _handleDatePicker() async {
    final DateTime date = await showDatePicker(
      context: context,
      initialDate: _birthday,
      firstDate: DateTime(1950),
      lastDate: DateTime(2100),
    );
    if (date != null && date != _birthday) {
      setState(() {
        _birthday = date;
      });
      _dateController.text = _dateFormatter.format(date);
    }
  }

  _delete() {
    DatabaseHelper.instance.deleteReg(widget.reg.id);
    widget.updateRegFriends();
    Navigator.pop(context);
  }

  _submit() {
    if (_formKey.currentState.validate()) {
      _formKey.currentState.save();

      Reg reg = Reg(image: _image,sei: _sei, Ksei: _Ksei, mei: _mei, Kmei: _Kmei, birthday: _birthday);
      if (widget.reg == null) {
        DatabaseHelper.instance.insertReg(reg);
      } else {
        reg.id = widget.reg.id;
        DatabaseHelper.instance.updateReg(reg);
      }
      widget.updateRegFriends();
      Navigator.pop(context);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: GestureDetector(
        onTap: () => FocusScope.of(context).unfocus(),   //opTapでフォーカスを外し、キーボードを隠すようにする処理
          child: SingleChildScrollView(
            child: Container(
              child: Column(
                children: <Widget>[
                  GestureDetector(
                    onTap: () => Navigator.pop(context),
                    child: Icon(
                      Icons.arrow_back,
                      size: 30.0,
                      color: Theme
                          .of(context)
                          .primaryColor,
                    ),
                  ),
                  SizedBox(
                    height: 20.0,
                  ),
                  Text(
                    widget.reg == null ? '写真を登録' : '写真を編集',
                    style: TextStyle(
                      color: Colors.black,
                      fontSize: 40.0,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  SizedBox(height: 10.0),
                  Form(
                    key: _formKey,
                    child: Column(
                      children: <Widget>[
                        Padding(
                          padding: EdgeInsets.symmetric(vertical: 20.0),
                          child: Container(
                              child: _showImage == null
                                  ? Text('選択中の画像はありません')
                                  : Image.file(_showImage)
                          ),
                        ),
                        Padding(
                          padding: EdgeInsets.symmetric(vertical: 20.0),
                          child: FlatButton(
                            child: const Text('友達の写真を選択'),
                            onPressed: (){
                              _takePhoto();
                            },
                          ),
                        ),
                        Padding(
                          padding: EdgeInsets.symmetric(vertical: 20.0),
                          child: TextFormField(
                            maxLength: 6,
                            style: TextStyle(fontSize: 18.0),
                            decoration: InputDecoration(
                              labelText: '姓',
                              labelStyle: TextStyle(fontSize: 18.0),
                              border: OutlineInputBorder(
                                borderRadius: BorderRadius.circular(10.0),
                              ),
                            ),
                            validator: (input) =>
                            input
                                .trim()
                                .isEmpty ? '姓を入力してください' : null,
                            onSaved: (input) => _sei = input,
                            initialValue: _sei,
                          ),
                        ),
                        Padding(
                          padding: EdgeInsets.symmetric(vertical: 20.0),
                          child: TextFormField(
                            style: TextStyle(fontSize: 18.0),
                            decoration: InputDecoration(
                              labelText: '姓(ふりがな)',
                              labelStyle: TextStyle(fontSize: 18.0),
                              border: OutlineInputBorder(
                                borderRadius: BorderRadius.circular(10.0),
                              ),
                            ),
                            validator: (input) =>
                            input
                                .trim()
                                .isEmpty ? '姓（ふりがな）を入力してください' : null,
                            onSaved: (input) => _Ksei = input,
                            initialValue: _Ksei,
                          ),
                        ),
                        Padding(
                          padding: EdgeInsets.symmetric(vertical: 20.0),
                          child: TextFormField(
                            maxLength: 6,
                            style: TextStyle(fontSize: 18.0),
                            decoration: InputDecoration(
                              labelText: '名',
                              labelStyle: TextStyle(fontSize: 18.0),
                              border: OutlineInputBorder(
                                borderRadius: BorderRadius.circular(10.0),
                              ),
                            ),
                            validator: (input) =>
                            input
                                .trim()
                                .isEmpty ? '名を入力してください' : null,
                            onSaved: (input) => _mei = input,
                            initialValue: _mei,
                          ),
                        ),
                        Padding(
                          padding: EdgeInsets.symmetric(vertical: 20.0),
                          child: TextFormField(
                            style: TextStyle(fontSize: 18.0),
                            decoration: InputDecoration(
                              labelText: '名（ふりがな）',
                              labelStyle: TextStyle(fontSize: 18.0),
                              border: OutlineInputBorder(
                                borderRadius: BorderRadius.circular(10.0),
                              ),
                            ),
                            validator: (input) =>
                            input
                                .trim()
                                .isEmpty ? '名（ふりがな）を入力してください' : null,
                            onSaved: (input) => _Kmei = input,
                            initialValue: _Kmei,
                          ),
                        ),
                        Padding(
                          padding: EdgeInsets.symmetric(vertical: 20.0),
                          child: TextFormField(
                            readOnly: true,
                            controller: _dateController,
                            style: TextStyle(fontSize: 18.0),
                            onTap: _handleDatePicker,
                            decoration: InputDecoration(
                              labelText: '誕生日',
                              labelStyle: TextStyle(fontSize: 18.0),
                              border: OutlineInputBorder(
                                borderRadius: BorderRadius.circular(10.0),
                              ),
                            ),
                          ),
                        ),
                        Container(
                          margin: EdgeInsets.symmetric(vertical: 20.0),
                          height: 60.0,
                          width: double.infinity,
                          decoration: BoxDecoration(
                            color: Theme
                                .of(context)
                                .primaryColor,
                            borderRadius: BorderRadius.circular(30.0),
                          ),
                          child: FlatButton(
                            child: Text(
                              widget.reg == null ? '友達を追加' : '編集',
                              style: TextStyle(
                                color: Colors.white,
                                fontSize: 20.0,
                              ),
                            ),
                            onPressed: _submit,
                          ),
                        ),
                        widget.reg != null ? Container(
                          margin: EdgeInsets.symmetric(vertical: 20.0),
                          height: 60.0,
                          width: double.infinity,
                          decoration: BoxDecoration(
                            color: Theme
                                .of(context)
                                .primaryColor,
                            borderRadius: BorderRadius.circular(30.0),
                          ),
                          child: FlatButton(
                            child: Text(
                              '削除',
                              style: TextStyle(
                                color: Colors.white,
                                fontSize: 20.0,
                              ),
                            ),
                            onPressed: _delete,
                          ),) : SizedBox.shrink(),
                      ],
                    ),
                  ),
                ],
              ),
            ),
          ),
        ),
    );
  }

}

import 'dart:typed_data';

import 'package:flutter/material.dart';
import '../components/appbar.dart';
import 'package:image_cropper/image_cropper.dart';
import 'package:friends_alubm/components/appbar.dart';
import 'package:friends_alubm/components/database_helper.dart';
import 'package:friends_alubm/components/reg_model.dart';


class FriendInfoScreen extends StatefulWidget {
  @override
  _FriendInfoScreenState createState() => _FriendInfoScreenState();

  final String sei;
  final String mei;
  final Uint8List image;

  FriendInfoScreen({this.sei, this.mei,this.image});
}

class _FriendInfoScreenState extends State<FriendInfoScreen> {
  Future<List<Reg>> _regList;



  @override
  void initState() {
    super.initState();
    _updateRegList();
  }

  _updateRegList() {
    setState(() {
      _regList = DatabaseHelper.instance.getRegList();
    });
  }

  Widget _buildInfo(Reg reg) {
    return Column(
      mainAxisAlignment: MainAxisAlignment.center,
      children: <Widget>[
        Container(
          child:  CircleAvatar(
            backgroundColor: Colors.white,
            child: ClipOval(
              child: Image.memory(reg.image),
            ),
          ),
        ),
        Padding(
          padding: EdgeInsets.symmetric(vertical: 5.0),
        ),
        Container(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: <Widget>[
              Text(reg.sei + ' ' + reg.mei,),
            ],
          ),
        )
      ],
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Color.fromRGBO(25, 25, 112, 1.0),
      appBar: InfoHeader(),
    body: FutureBuilder(
      future: _regList,
      builder: (context, snapshot) {
        if(!snapshot.hasData) {
          return Center(
            child: CircularProgressIndicator(),
          );
        }
        return _buildInfo(snapshot.data);
      },
    )
    );
  }
}

import 'dart:io';
import 'dart:typed_data';

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:friends_alubm/components/reg_model.dart';
import 'package:friends_alubm/providers.dart';
import 'package:friends_alubm/router.dart';
import 'package:image_cropper/image_cropper.dart';
import 'package:image_picker/image_picker.dart';
import 'package:font_awesome_flutter/font_awesome_flutter.dart';

// part 'friends_reg_screen.freezed.dart';

//
// 状態
//
// @freezed
// abstract class AddEditScreenCtrlState with _$AddEditScreenCtrlState {
//   //
//   const factory AddEditScreenCtrlState({
//     String sei,
//     String mei,
//     Uint8List image,
//   }) = _AddEditScreenCtrlState;
// }

//
// コントローラー
//
class AddEditScreenCtrl extends StateNotifier<Reg> {
  //
  final Reader reader;
  final int editRegId;

  final TextEditingController nicknameCtrl;
  final TextEditingController seiCtrl;
  final TextEditingController birthdayCtrl;
  final TextEditingController relCtrl;
  final TextEditingController episodeCtrl;

  // final Reg editReg;

  AddEditScreenCtrl({
    @required this.reader,
    this.editRegId,
  })  : nicknameCtrl = TextEditingController(),
        seiCtrl = TextEditingController(),
        birthdayCtrl = TextEditingController(),
        relCtrl = TextEditingController(),
        episodeCtrl = TextEditingController(),
        // editReg = reader(singleRegProvider(editRegId)),
        super(reader(singleRegProvider(editRegId)) ?? Reg()) {
    //
    // 各初期値を設定
    //

    nicknameCtrl.text = state.nickname;
    seiCtrl.text = state.sei;
    birthdayCtrl.text = state.birthday;
    relCtrl.text = state.rel;
    episodeCtrl.text = state.episode;

    //
    // 文字類が変わった時に状態を更新
    //
    nicknameCtrl.addListener(() => state = state.copyWith(nickname: nicknameCtrl.text));
    seiCtrl.addListener(() => state = state.copyWith(sei: seiCtrl.text));
    birthdayCtrl.addListener(() => state = state.copyWith(birthday: birthdayCtrl.text));
    relCtrl.addListener(() => state = state.copyWith(rel: relCtrl.text));
    episodeCtrl.addListener(() => state = state.copyWith(episode: episodeCtrl.text));
  }

  void dispose() {
    nicknameCtrl.dispose();
    seiCtrl.dispose();
    birthdayCtrl.dispose();
    relCtrl.dispose();
    episodeCtrl.dispose();
    super.dispose();
  }

  //
  // 保存の処理はオブジェクト一覧を管理しているプロバイダに任せる
  //
  Future<void> save() => reader(regObjectsCtrlProvider).update(state);

  Future<void> takePhoto() async {
    final pickerResult = await ImagePicker().getImage(source: ImageSource.gallery);
    // _cropImage(friendImage.path);
    if (pickerResult == null) return;
    // final bytes = await pickerResult.readAsBytes();
    File _croppedImage = await ImageCropper.cropImage(
      sourcePath: pickerResult.path,
      maxHeight: 300,
      maxWidth: 300,
      aspectRatio: CropAspectRatio(ratioX: 1.0, ratioY: 1.0),
    );
    if (_croppedImage == null) return;
    Uint8List bytes = await _croppedImage.readAsBytes();

    // ImageCropper.cropImage(sourcePath: sourcePath)
    state = state.copyWith(image: bytes);
  }


  // _cropImage(filePath) async {
  //   File _croppedImage =
  //       await ImageCropper.cropImage(sourcePath: filePath, maxHeight: 100, maxWidth: 100, aspectRatio: CropAspectRatio(ratioX: 1.0, ratioY: 1.0));
  //   if (_croppedImage != null) {
  //     Uint8List _imageFile = await _croppedImage.readAsBytes();
  //     setState(() {
  //       _showImage = File(_croppedImage.path);
  //       _image = _imageFile;
  //     });
  //   }
  // }

  //
  // 変更があるかはこれだけで探知できる
  //
  // bool isMofified() => state != reader(singleRegProvider(editRegId));

  }


final addEditScreenCtrlProvider = StateNotifierProvider.family.autoDispose((ref, regId) => AddEditScreenCtrl(reader: ref.read, editRegId: regId));

//
// 保存可能かどうかのプロバイダ
//
final canSaveProvider = Provider.family.autoDispose<bool, int>((ref, regId) {
  //
  // 編集内容取得
  //
  final newReg = ref.watch(addEditScreenCtrlProvider(regId).state);

  //
  // 必須項目をチェック
  //
  if (newReg.image == null || (newReg.nickname?.length ?? 0) < 1 || (newReg.episode?.length ?? 0) < 1) return false;

  //
  // すでに存在しているものと比較して変更があれば保存可能
  //
  return newReg != ref.read(singleRegProvider(regId));
});

final imageProvider = Provider.family.autoDispose<ImageProvider, int>((ref, regId) {
  final bytes = ref.watch(addEditScreenCtrlProvider(regId).state).image;
  if (bytes != null) return MemoryImage(bytes);
  return null;
});

//
// ビュー
//
class AddEditFriendsScreen extends ConsumerWidget {
  //
  static String name({int editRegId}) =>
      editRegId == null ? '/add-edit' : '/add-edit/$editRegId';

  static final router = UXRouter(
    pattern: r'/add-edit(/([a-z0-9\-]+))?',
    builder: (matches) =>
        AddEditFriendsScreen(
            editRegId: matches[2] != null ? int.parse(matches[2]) : null),
  );

  final int editRegId;

  AddEditFriendsScreen({
    @required this.editRegId,
  });



  @override
  Widget build(BuildContext context, watch) {
    //
    final ctrl = watch(addEditScreenCtrlProvider(editRegId));
    int count = 0;

    Future<void> delete() async {
      if (editRegId != null) {
        TextButton(
          child: Text('登録'),
          onPressed: () {
            context.read(regObjectsCtrlProvider).deleteById(editRegId);
            Navigator.pop(context);
          },
        );
    }
    }

    return Scaffold(
      appBar: PreferredSize(
        preferredSize: Size.fromHeight(kToolbarHeight),
        //
        // ここで変更がある場合のみIconButtonを押せるようにする
        //
        child: Consumer(
          builder: (ctx, watch, _) =>
              AppBar(
                //
                // 戻るボタンを非表示にする
                //
                // automaticallyImplyLeading: false,
                leadingWidth: 85,
                leading: TextButton(
                  child: Text(
                    'キャンセル',
                    style: TextStyle(
                      color: Color.fromRGBO(224, 125, 117, 1.0),
                      fontWeight: FontWeight.bold,
                      fontSize: 12.0,
                    ),
                  ),
                  onPressed: () => Navigator.of(context).pop(),
                ),
                title: Image.asset(
                  'images/appbar_logo.png',
                  height: 60,
                  width: 110,
                ),
                centerTitle: true,
                elevation: 0.0,
                backgroundColor: Color.fromRGBO(250,243,227,1.0),
                actions: [
                  TextButton(
                    child: Text(
                      '登録',
                      style: TextStyle(
                        color: Color.fromRGBO(224, 125, 117, 1.0),
                        fontWeight: FontWeight.bold,
                        ),
                    ),
                    // icon: Icon(Icons.save),
                    onPressed: watch(canSaveProvider(editRegId))
                        ? () async {
                      await ctrl.save();
                      // Navigator.pop(context);
                      showDialog(
                        context: context,
                        builder: (_) {
                          return Container(
                            child: AlertDialog(
                              backgroundColor: Color.fromRGBO(88, 86, 104, 1.0),
                              title: Column(
                                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                children: [
                                  Icon(
                                      FontAwesomeIcons.checkCircle,
                                    size: 130.0,
                                    color: Color.fromRGBO(250,243,227,1.0),
                                  ),
                                  SizedBox(
                                    height: 15.0,
                                  ),
                                  Text(
                                    '登録が完了しました',
                                      style: TextStyle(
                                        color: Color.fromRGBO(250,243,227,1.0),
                                        fontWeight: FontWeight.bold,
                                        fontSize: 16.0,
                                    ),
                                  ),
                                  SizedBox(
                                    height: 15,
                                  ),
                                  ElevatedButton(
                                    child: Text("ホームへ戻る"),
                                    style: ElevatedButton.styleFrom(
                                      primary: Color.fromRGBO(224, 125, 117, 1.0),
                                      onPrimary: Color.fromRGBO(250,243,227,1.0),
                                      shape: const StadiumBorder(),
                                    ),
                                    onPressed: () => Navigator.popUntil(context, (_) => count++ >= 2),
                                  ),
                                ],
                              ),
                            ),
                          );
                        },
                      );
                    }
                        : null,
                  )
                ],
              ),
        ),
      ),
      body: ListView(
        padding: const EdgeInsets.all(30.0),
        children: [
          Container(
            padding: EdgeInsets.symmetric(
              vertical: 20,
              horizontal: 30,
            ),
            alignment: Alignment.center,
            child: Container(
              width: 200,
              // color: Colors.red,
              child: Consumer(
                builder: (ctx, watch, _) =>
                    AspectRatio(
                      aspectRatio: 1,
                      child: Stack(
                        fit: StackFit.expand,
                        children: [
                          //
                          // 背景色
                          //
                          // Container(
                          //     decoration: BoxDecoration(
                          //       shape: BoxShape.circle,
                          //       color: Colors.grey.shade300,
                          //   ),
                          // ),
                          //
                          //　アイコン
                          //
                          Center(
                            child: Icon(
                              Icons.account_circle_sharp ,
                                size: 200.0,
                              color: Color.fromRGBO(204, 204, 204, 1.0),
                              ),
                          ),
                          //
                          //　画像がある時は表示
                          //
                          if (watch(imageProvider(editRegId)) != null)
                            CircleAvatar(
                              backgroundColor: Colors.white,
                              child: ClipOval(
                                child: Image(
                                  image: watch(imageProvider(editRegId)),
                                  fit: BoxFit.cover,
                                ),
                              ),
                            ),
                          //
                          // タップのレイヤー
                          //
                          Material(
                            type: MaterialType.transparency,
                            child: InkWell(onTap: () => ctrl.takePhoto()),
                          ),
                        ],
                      ),
                    ),
              ),
            ),
          ),
          TextField(
              controller: ctrl.nicknameCtrl,
              maxLength: 12,
              decoration: InputDecoration(
                hintText: 'たなかくん',
                labelText: 'ニックネーム*',
              ),
          ),
          TextField(
            controller: ctrl.seiCtrl,
            maxLength: 5,
            decoration: InputDecoration(
              hintText: '男の子',
              labelText: '性別*',
            ),
          ),
          TextField(
            controller: ctrl.birthdayCtrl,
            maxLength: 12,
            decoration: InputDecoration(
              hintText: '2000/01/01',
              labelText: '誕生日*',
            ),
          ),
          TextField(
            controller: ctrl.relCtrl,
            maxLength: 12,
            decoration: InputDecoration(
              hintText: '友人',
              labelText: '関係性*',
            ),
          ),
          TextField(
              controller: ctrl.episodeCtrl,
              maxLength: 255,
              keyboardType: TextInputType.multiline,
              maxLines: null,
              decoration:  InputDecoration(
                hintText: 'エピソードを入力してください',
                labelText: 'エピソード*'
              ),
          ),
          ConstrainedBox(
            constraints: BoxConstraints(
              minHeight: 10.0,
              maxWidth: 30.0,
            ),
            child: Container(
              child: editRegId == null ? Container() :
              ElevatedButton(
                child: Text(
                    '登録内容を削除',
                  style: TextStyle(
                    fontWeight: FontWeight.bold,
                  ),
                ),
                onPressed: () {
                  context.read(regObjectsCtrlProvider).deleteById(editRegId);
                  Navigator.pop(context);
                },
                style: ElevatedButton.styleFrom(
                  primary: Color.fromRGBO(204, 204, 204, 1.0),
                  onPrimary: Color.fromRGBO(224, 125, 117, 1.0),
                ),
              ),
            ),
          )
        ],
      ),
    );
  }
}